function [out_img] = myMeanShiftSegmentation(inp_img, spatial_bw, intensity_bw, no_neighbours, max_iterations)
%MYMEANSHIFTSEGMENTATION Summary of this function goes here
%   Detailed explanation goes here
inp_img = double(inp_img);
original_img = inp_img;
inp_img = imresize(InputImage, 0.5);
out_img = inp_img;

no_rows = size(inp_img, 1);
no_cols = size(inp_img, 2);
attribute_size = no_rows*no_cols;
attributes = zeros(attribute_size, 5);
for i=1:no_rows
    for j=1:no_cols
        attributes((i-1)*no_cols+j,:) = [i/spatial_bw, j/spatial_bw,...
            inp_img(i,j,1)/intensity_bw, inp_img(i,j,2)/intensity_bw, inp_img(i,j,3)/intensity_bw];
    end
end
wait = waitbar(0, "Mean Shift Segmentation in progress");
no_iterations = 0;
while(no_iterations < max_iterations)
    [nearest_neigh, distances] = knnsearch(attributes, attributes, 'k', no_neighbours);
    for i=1:attribute_size
        weights = exp(-(distances(i,:).^2)/2);
        sum_weights = sum(weights);
        temp_attributes = attributes;
        attributes(i, 3:5) = sum(weights*temp_attributes(nearest_neigh(i,:),3:5))/sum_weights;
    end
    no_iterations = no_iterations + 1;
    for i=1:inputImageSize(1)
        for j=1:inputImageSize(2)
            out_img(i,j,1) = output(inputImageSize(2)*i-inputImageSize(2)+j,3);
            out_img(i,j,2) = output(inputImageSize(2)*i-inputImageSize(2)+j,4);
            out_img(i,j,3) = output(inputImageSize(2)*i-inputImageSize(2)+j,5);
        end
    end
    imshow(out_img);

    waitbar(no_iterations/max_iterations); 
end

for i=1:no_rows
    for j=1:no_cols
        out_img(i,j,1) = attributes((i-1)*no_cols+j,3);
        out_img(i,j,2) = attributes((i-1)*no_cols+j,4);
        out_img(i,j,3) = attributes((i-1)*no_cols+j,5);
    end
end
close(wait);
imshow(out_img);

end

% function [ OutputImage] = myMeanShiftSegmentation(max_iter,sigma_S,sigma_I,noOfNeighbours)
% % Implement segmentation of image using mean-shift.
% 
%     %% Optimal value: max_iter=5, sigma_S=16, sigma_I=48, noOfNeighbours=you can take 100 or 200 or 300
%     
%     InputImage = imread('../data/baboonColor.png');
%     InputImage=mat2gray(InputImage);
% %     filter = fspecial('gaussian', [5 5], 1);
% %     InputImage = imfilter(InputImage, filter, 'same');
% 
%     % undersample to reduce computations
%     InputImage = imresize(InputImage, 0.5);
%     inputImageSize = size(InputImage);
%     OutputImage = zeros(inputImageSize);
% 
%     % Produce 5-d feature space for knnsearch
%     nSamples = inputImageSize(1)*inputImageSize(2);
%     samples = zeros(5, nSamples);
%     for i=1:inputImageSize(1)
%         for j=1:inputImageSize(2)
%             samples(:, inputImageSize(2)*i-inputImageSize(2)+j) = [i; j; InputImage(i, j, 1); InputImage(i, j, 2); InputImage(i, j, 3)];
%         end
%     end
% 
%     iter=0;
% 
%     X = samples';
%     X(:, 3:5) = X(:, 3:5)*255/(1.414*sigma_I);
%     X(:, 1:2) = X(:, 1:2)/(1.414*sigma_S);
%     output = X;
%     wait = waitbar(0, "Mean Shift Segmentation in progress");
%     while(iter<max_iter)
%         [IDX, D] = knnsearch(X, X, 'k', noOfNeighbours);
%         for i=1:nSamples
%             weights = exp(-(D(i,:).^2));
%             sum_weights = sum(weights);
%             weights = weights';
% %             weights = [weights, weights, weights];
%             % finding mean
%             output(i, 3:5) = sum(weights.*(X(IDX(i,:),3:5)))/sum_weights;
%         end
%         X = output;
%         iter = iter+1;
% %         disp(iter);
%         for i=1:inputImageSize(1)
%             for j=1:inputImageSize(2)
%                 OutputImage(i,j,1) = output(inputImageSize(2)*i-inputImageSize(2)+j,3);
%                 OutputImage(i,j,2) = output(inputImageSize(2)*i-inputImageSize(2)+j,4);
%                 OutputImage(i,j,3) = output(inputImageSize(2)*i-inputImageSize(2)+j,5);
%             end
%         end
%         imshow(OutputImage);
%         waitbar(iter/max_iter); 
%     end
%     
%     % produce output
%     for i=1:inputImageSize(1)
%         for j=1:inputImageSize(2)
%             OutputImage(i,j,1) = output(inputImageSize(2)*i-inputImageSize(2)+j,3);
%             OutputImage(i,j,2) = output(inputImageSize(2)*i-inputImageSize(2)+j,4);
%             OutputImage(i,j,3) = output(inputImageSize(2)*i-inputImageSize(2)+j,5);
%         end
%     end
%     OutputImage = imresize(OutputImage, 2);
%     close(wait);
%     imshow(OutputImage);
% end